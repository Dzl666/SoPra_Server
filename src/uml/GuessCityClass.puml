@startuml
'https://plantuml.com/class-diagram

enum UserStatus {
    ONLINE
    OFFLINE
}

enum CityCategory {
    EUROPE
    ASIA
    NORTH_AMERICA
    SOUTH_AMERICA
    AFRICA
    WORLD
}

class User {
    - userId: long
    - username: String
    - password: String
    - userStatus: UserStatus
    - createDay: Date
    - birthDay: Date
    + userStatistics: UserStatistics
    + User(String name, String password)
    + getUserId(): long
    + getUsername(): String
    + setUsername(String name): void
    + getPassword(): String
    + setPassword(String password): void
    + getUserStatus(): UserStatus
    + setUserStatus(UserStatus status): void
    + getUserCreateDay(): Date
    + getUserBirthDay(): Date
    + setUserBirthDay(Date birthday): void
}

class UserStatistics {
    - totalScore: long
    - totalGameNum: long
    - specificScore: Map<CityCategory, Long>
    - gameHistories: List<UserGameHistory>
    + UserStatistics()
    + getTotalScore(): long
    + getSpecificScore(CityCategory category): long
    + updateScore(long score, CityCategory category): void
    + getTotalGameNum(): long
    + addTotalGameNum(): void
    + getGameHistoryList(): Iterator<UserGameHistory>
    + addGameHistory(UserGameHistory history): void
}

class UserGameHistory {
    - gameId: long
    - gameInfo: GameInfo
    - gameScore: int
    - answerList: List<String>
    + UserGameHistory(long gameId, GameInfo gameInfo,
      int score)
    + getGameId(): long
    + getScore(): int
    + getGameInfo(): GameInfo
    + addAnswer(String answer): void
    + getAnswerList(): Iterator<String>
}

User <-- UserStatistics
User <- UserStatus
UserStatistics *-- UserGameHistory
UserStatistics <-- CityCategory

class Game {
    - gameId: long
    - category: CityCategory
    - totalRounds: int
    - countdownTime: int
    - playerList: List<Player>
    - currentRound: int

    + Game(CityCategory category, int totalRounds, int countdownTime)
    + addPlayer(User userAsPlayer): void
    + getCurrentRounds(): int
    + getTotalRounds(): int
    + getCountdownTime(): int
    + getPlayerRanking(): List<PlayerRanking>
}

class Player {
    - userId: long
    - playerName: String
    - score: int
    - answerList: List<String>
    + Player(long userId, String name)
    + getUserId(): long
    + getPlayerName(): String
    + getScore(): int
    + addScore(int score): void
    + addAnswer(String answer): void
    + getAnswerList(): Iterator<String>
}

'class PlayerRanking {
'    - playerName: String
'    - rank: int
'    + PlayerRanking(String name, int rank)
'    + getPlayerName(): String
'    + getRank(): int
'}

class GameInfo {
    - gameId: long
    - gameCategory: CityCategory
    - gameTime: Date
    - gameRounds: int
    - playerNum: int
    - labelList: List<String>
    + GameInfo(long gameId, CityCategory category,
      int gameRound, int playerNum)
    + getCategory(): CityCategory
    + getGameTime(): Date
    + getPlayerNum(): int
    + getGameRound(): int
    + addLabel(String label): void
    + getLabelList(): Iterator<String>
}

User "1"..>"1" Player
Game o- Player

Game <--- CityCategory
Game "1"..>"1" GameInfo
CityCategory -> GameInfo



'CityCategory <|-- EuroCity
'CityCategory <|--- AsiaCity
'CityCategory <|--- NorthAmericaCity
'CityCategory <|---- WorldCity

@enduml