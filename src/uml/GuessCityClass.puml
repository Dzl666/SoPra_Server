@startuml
'https://plantuml.com/class-diagram

enum UserStatus {
    ONLINE
    OFFLINE
}

enum CityCategory {
    EUROPE
    ASIA
    NORTH_AMERICA
}

class User {
    - userId: long
    - username: String
    - password: String
    - userStatus: UserStatus
    - createDay: Date
    - birthDay: Date
    + userStatistics: UserStatistics
    + User(String name, String password)
    + getUserId(): long
    + getUsername(): String
    + setUsername(String name): void
    + changePassword(String oldPwd, String newPwd): boolean
    + getUserStatus(): UserStatus
    + setUserStatus(UserStatus status): void
    + getUserCreateDay(): Date
    + getUserBirthDay(): Date
    + setUserBirthDay(Date birthday): void
}

class Player {
    - userId: long
    - playerName: String
    - score: int
    - answerList: List<String>
    + Player(long userId, String username)
    + getUserId(): long
    + getPlayerName(): String
    + getScore(): int
    + addScore(int score): void
    + addAnswer(String answer): void
}

class UserStatistics {
    - totalScore: long
    - totalGameNum: long
    - specificScore: Map<CityCategory, long>
    - gameHistories: List<GameHistory>
    + UserStatistics()
    + getTotalScore(): long
    + getSpecificScore(CityCategory category): long
    + addScore(long score, CityCategory category): void
    + getTotalGameNum(): long
    + addGameNum(): long
    + showGameHistory(): void
    + addGameHistory(GameHistory history): void
}

class UserGameHistory {
    - gameId: long
    - gameInfo: GameInfo
    - score: int
    - answerList: List<String>
    + GameHistory(long gameId, GameInfo gameInfo)
    + getGameInfo(): GameInfo
    + getScore(): int
    + getAnswer(): List<String>
}

User <-- UserStatistics
User <-- UserStatus
UserStatistics *-- UserGameHistory


class Game {
    - playerList: List<Player>
    - gameRounds: int
    - cityDB: CityBase
    + Game(int rounds, CityBase cityDB)
    + addPlayer(User userAsPlayer): void
    + getGameRounds(): int
    + showRanking(): void
}

class CityBase {
    - category: CityCategory
    - cityList: List<City>
    + CityBase(CityCategory category)
    + getCategory(): CityCategory
    + loadCityList(): void
    + getCityListLength(): int
    + drawCities(): List<City>
}

class GameInfo {
    - gameId: long
    - gameCategory: CityCategory
    - gameTime: Date
    - gameRounds: int
    - playerNum: int
    - labelList: List<String>
    + GameInfo(long gameId, CityCategory category,
      int gameRound, int playerNum)
    + getCategory(): CityCategory
    + getGameTime(): Date
    + getPlayerNum(): int
    + getGameRound(): int
    + addLabel(String label): void
    + getLabel(): List<String>
}

class City {
    - cityName: String
    - countryName: String
    - location: String
    - pictureBase: List<Picture>
    + City(String name, String country,
      String location, List<Picture> picBase)
    + getCityName(): String
    + getCountryName(): String
    + getLocation(): String
    + generatePicture(): Picture
}

'class Picture {
'    - pictureId: long
'    - picturePath: String
'    + Picture(long pictureId, String path)
'    + getPictureId(): long
'    + getPicturePath(): String
'}

Player <-- User
Player -o Game

Game <-- CityBase
CityBase o-- City
CityBase <-- CityCategory
UserStatistics <- CityCategory
CityCategory --> GameInfo
UserGameHistory <- GameInfo

'CityCategory <|-- EuroCity
'CityCategory <|--- AsiaCity
'CityCategory <|--- NorthAmericaCity
'CityCategory <|---- WorldCity

@enduml